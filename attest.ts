import axios from "axios";
import cbor from "cbor";
import { aws_root_cert_pem } from "./aws_root_pem";
import { Certificate } from "@fidm/x509";
import { Header } from "@ldclabs/cose-ts/header";
import { Sign1Message } from "@ldclabs/cose-ts/sign1";
import { Key } from "@ldclabs/cose-ts/key";
import * as iana from "@ldclabs/cose-ts/iana";
import { hexToBytes, utf8ToBytes } from "@ldclabs/cose-ts/utils";
import { ECDSAKey } from "@ldclabs/cose-ts/ecdsa";

const requiredFields = [
  "module_id",
  "digest",
  "timestamp",
  "pcrs",
  "certificate",
  "cabundle",
];

const numberInRange = (start: number, end: number, value: number) => {
  return value > start && value <= end;
};

function derToPem(der: Buffer): string {
  const base64 =
    der
      .toString("base64")
      .match(/.{1,64}/g)
      ?.join("\n") ?? "";
  return `-----BEGIN CERTIFICATE-----\n${base64}\n-----END CERTIFICATE-----`;
}

const verifyCertChain = (rootPem: string, certChainStr: string[]): boolean => {
  const rootCert = Certificate.fromPEM(Buffer.from(rootPem));
  const certChainPartial = certChainStr.map((c) =>
    Certificate.fromPEM(Buffer.from(c))
  );
  const certChain = [rootCert, ...certChainPartial];

  for (let i = 1; i < certChain.length - 1; i++) {
    const isValid = certChain[i - 1].publicKey.verify(
      certChain[i].tbsCertificate.toDER(),
      certChain[i].signature,
      "sha384"
    );
    console.log(certChain[i].signature.length);
    if (!isValid) {
      console.error(
        `Certificate at index ${i} is not properly signed by the next certificate.`
      );
      return false;
    }
  }
  return true;
};

function rmPadding(buf: Array<number>): Array<number> {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

function constructLength(arr: Array<number>, len: number) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

const toDER = function toDER(rBuf: Buffer, sBuf: Buffer): Buffer {
  var r = Array.from(rBuf);
  var s = Array.from(sBuf);

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r);
  // Pad values
  if (s[0] & 0x80) s = [0].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);

  return Buffer.from(res);
};

(async () => {
  const jsonRpcBody = {
    jsonrpc: "2.0",
    method: "openpassport_attestation",
    id: 1,
    params: {},
  };

  const res = await axios.post("http://13.200.40.252:8888", jsonRpcBody);
  const attestation = res.data.result;
  // const attestation = [
  //   132, 68, 161, 1, 56, 34, 160, 89, 17, 10, 169, 105, 109, 111, 100, 117, 108,
  //   101, 95, 105, 100, 120, 39, 105, 45, 48, 97, 98, 51, 49, 97, 97, 50, 56, 51,
  //   53, 54, 98, 55, 102, 50, 53, 45, 101, 110, 99, 48, 49, 57, 52, 98, 54, 101,
  //   56, 101, 50, 51, 97, 56, 57, 50, 50, 102, 100, 105, 103, 101, 115, 116, 102,
  //   83, 72, 65, 51, 56, 52, 105, 116, 105, 109, 101, 115, 116, 97, 109, 112, 27,
  //   0, 0, 1, 148, 183, 157, 239, 171, 100, 112, 99, 114, 115, 176, 0, 88, 48, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 88, 48,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 88,
  //   48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
  //   88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   4, 88, 48, 55, 167, 128, 82, 11, 232, 176, 173, 126, 130, 50, 79, 226, 51,
  //   139, 109, 24, 119, 18, 137, 54, 48, 169, 8, 63, 130, 5, 138, 72, 107, 62,
  //   42, 85, 34, 165, 129, 105, 238, 181, 16, 57, 240, 205, 237, 244, 154, 198,
  //   177, 5, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 6, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 7, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 8, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 9, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 10, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 88, 48, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 88, 48, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 88, 48, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  //   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 99, 101, 114,
  //   116, 105, 102, 105, 99, 97, 116, 101, 89, 2, 129, 48, 130, 2, 125, 48, 130,
  //   2, 3, 160, 3, 2, 1, 2, 2, 16, 1, 148, 182, 232, 226, 58, 137, 34, 0, 0, 0,
  //   0, 103, 155, 134, 5, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 48, 129,
  //   143, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85,
  //   4, 8, 12, 10, 87, 97, 115, 104, 105, 110, 103, 116, 111, 110, 49, 16, 48,
  //   14, 6, 3, 85, 4, 7, 12, 7, 83, 101, 97, 116, 116, 108, 101, 49, 15, 48, 13,
  //   6, 3, 85, 4, 10, 12, 6, 65, 109, 97, 122, 111, 110, 49, 12, 48, 10, 6, 3,
  //   85, 4, 11, 12, 3, 65, 87, 83, 49, 58, 48, 56, 6, 3, 85, 4, 3, 12, 49, 105,
  //   45, 48, 97, 98, 51, 49, 97, 97, 50, 56, 51, 53, 54, 98, 55, 102, 50, 53, 46,
  //   97, 112, 45, 115, 111, 117, 116, 104, 45, 49, 46, 97, 119, 115, 46, 110,
  //   105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101, 115, 48, 30, 23,
  //   13, 50, 53, 48, 49, 51, 48, 49, 52, 48, 48, 51, 52, 90, 23, 13, 50, 53, 48,
  //   49, 51, 48, 49, 55, 48, 48, 51, 55, 90, 48, 129, 148, 49, 11, 48, 9, 6, 3,
  //   85, 4, 6, 19, 2, 85, 83, 49, 19, 48, 17, 6, 3, 85, 4, 8, 12, 10, 87, 97,
  //   115, 104, 105, 110, 103, 116, 111, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 12,
  //   7, 83, 101, 97, 116, 116, 108, 101, 49, 15, 48, 13, 6, 3, 85, 4, 10, 12, 6,
  //   65, 109, 97, 122, 111, 110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3, 65, 87,
  //   83, 49, 63, 48, 61, 6, 3, 85, 4, 3, 12, 54, 105, 45, 48, 97, 98, 51, 49, 97,
  //   97, 50, 56, 51, 53, 54, 98, 55, 102, 50, 53, 45, 101, 110, 99, 48, 49, 57,
  //   52, 98, 54, 101, 56, 101, 50, 51, 97, 56, 57, 50, 50, 46, 97, 112, 45, 115,
  //   111, 117, 116, 104, 45, 49, 46, 97, 119, 115, 48, 118, 48, 16, 6, 7, 42,
  //   134, 72, 206, 61, 2, 1, 6, 5, 43, 129, 4, 0, 34, 3, 98, 0, 4, 63, 164, 97,
  //   205, 88, 47, 175, 107, 2, 115, 100, 209, 98, 37, 156, 232, 46, 91, 217, 145,
  //   78, 26, 153, 76, 5, 161, 63, 35, 156, 69, 212, 43, 77, 59, 45, 210, 214,
  //   117, 240, 167, 141, 10, 157, 107, 59, 200, 56, 67, 86, 61, 67, 50, 140, 54,
  //   135, 253, 216, 73, 212, 90, 20, 57, 117, 186, 234, 214, 130, 157, 19, 182,
  //   89, 241, 71, 138, 119, 25, 121, 140, 120, 79, 99, 165, 222, 233, 243, 231,
  //   123, 132, 236, 25, 157, 188, 170, 220, 164, 213, 163, 29, 48, 27, 48, 12, 6,
  //   3, 85, 29, 19, 1, 1, 255, 4, 2, 48, 0, 48, 11, 6, 3, 85, 29, 15, 4, 4, 3, 2,
  //   6, 192, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 3, 104, 0, 48, 101, 2,
  //   49, 0, 146, 7, 215, 71, 158, 11, 49, 127, 92, 52, 79, 184, 25, 26, 20, 247,
  //   83, 231, 72, 146, 174, 143, 156, 53, 114, 199, 103, 213, 149, 77, 19, 84, 2,
  //   213, 174, 138, 254, 13, 126, 174, 230, 164, 62, 236, 37, 160, 202, 136, 2,
  //   48, 45, 76, 16, 10, 199, 199, 165, 221, 58, 145, 91, 235, 54, 173, 173, 104,
  //   59, 124, 217, 9, 78, 141, 60, 232, 84, 223, 104, 16, 123, 220, 96, 4, 236,
  //   191, 64, 149, 36, 218, 79, 231, 35, 119, 55, 26, 151, 238, 247, 228, 104,
  //   99, 97, 98, 117, 110, 100, 108, 101, 132, 89, 2, 21, 48, 130, 2, 17, 48,
  //   130, 1, 150, 160, 3, 2, 1, 2, 2, 17, 0, 249, 49, 117, 104, 27, 144, 175,
  //   225, 29, 70, 204, 180, 228, 231, 248, 86, 48, 10, 6, 8, 42, 134, 72, 206,
  //   61, 4, 3, 3, 48, 73, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 15,
  //   48, 13, 6, 3, 85, 4, 10, 12, 6, 65, 109, 97, 122, 111, 110, 49, 12, 48, 10,
  //   6, 3, 85, 4, 11, 12, 3, 65, 87, 83, 49, 27, 48, 25, 6, 3, 85, 4, 3, 12, 18,
  //   97, 119, 115, 46, 110, 105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118,
  //   101, 115, 48, 30, 23, 13, 49, 57, 49, 48, 50, 56, 49, 51, 50, 56, 48, 53,
  //   90, 23, 13, 52, 57, 49, 48, 50, 56, 49, 52, 50, 56, 48, 53, 90, 48, 73, 49,
  //   11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 15, 48, 13, 6, 3, 85, 4, 10,
  //   12, 6, 65, 109, 97, 122, 111, 110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3,
  //   65, 87, 83, 49, 27, 48, 25, 6, 3, 85, 4, 3, 12, 18, 97, 119, 115, 46, 110,
  //   105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101, 115, 48, 118, 48,
  //   16, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43, 129, 4, 0, 34, 3, 98, 0, 4,
  //   252, 2, 84, 235, 166, 8, 193, 243, 104, 112, 226, 154, 218, 144, 190, 70,
  //   56, 50, 146, 115, 110, 137, 75, 255, 246, 114, 217, 137, 68, 75, 80, 81,
  //   229, 52, 164, 177, 246, 219, 227, 192, 188, 88, 26, 50, 183, 177, 118, 7,
  //   14, 222, 18, 214, 154, 63, 234, 33, 27, 102, 231, 82, 207, 125, 209, 221, 9,
  //   95, 111, 19, 112, 244, 23, 8, 67, 217, 220, 16, 1, 33, 228, 207, 99, 1, 40,
  //   9, 102, 68, 135, 201, 121, 98, 132, 48, 77, 197, 63, 244, 163, 66, 48, 64,
  //   48, 15, 6, 3, 85, 29, 19, 1, 1, 255, 4, 5, 48, 3, 1, 1, 255, 48, 29, 6, 3,
  //   85, 29, 14, 4, 22, 4, 20, 144, 37, 181, 13, 217, 5, 71, 231, 150, 195, 150,
  //   250, 114, 157, 207, 153, 169, 223, 75, 150, 48, 14, 6, 3, 85, 29, 15, 1, 1,
  //   255, 4, 4, 3, 2, 1, 134, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 3,
  //   105, 0, 48, 102, 2, 49, 0, 163, 127, 47, 145, 161, 201, 189, 94, 231, 184,
  //   98, 124, 22, 152, 210, 85, 3, 142, 31, 3, 67, 249, 91, 99, 169, 98, 140, 61,
  //   57, 128, 149, 69, 161, 30, 188, 191, 46, 59, 85, 216, 174, 238, 113, 180,
  //   195, 214, 173, 243, 2, 49, 0, 162, 243, 155, 22, 5, 178, 112, 40, 165, 221,
  //   75, 160, 105, 181, 1, 110, 101, 180, 251, 222, 143, 224, 6, 29, 106, 83, 25,
  //   127, 156, 218, 245, 217, 67, 188, 97, 252, 43, 235, 3, 203, 111, 238, 141,
  //   35, 2, 243, 223, 246, 89, 2, 196, 48, 130, 2, 192, 48, 130, 2, 70, 160, 3,
  //   2, 1, 2, 2, 17, 0, 143, 200, 93, 129, 40, 137, 83, 175, 209, 235, 205, 164,
  //   119, 58, 187, 167, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 48, 73, 49,
  //   11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 15, 48, 13, 6, 3, 85, 4, 10,
  //   12, 6, 65, 109, 97, 122, 111, 110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3,
  //   65, 87, 83, 49, 27, 48, 25, 6, 3, 85, 4, 3, 12, 18, 97, 119, 115, 46, 110,
  //   105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101, 115, 48, 30, 23,
  //   13, 50, 53, 48, 49, 50, 53, 50, 51, 51, 54, 49, 51, 90, 23, 13, 50, 53, 48,
  //   50, 49, 53, 48, 48, 51, 54, 49, 51, 90, 48, 101, 49, 11, 48, 9, 6, 3, 85, 4,
  //   6, 19, 2, 85, 83, 49, 15, 48, 13, 6, 3, 85, 4, 10, 12, 6, 65, 109, 97, 122,
  //   111, 110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3, 65, 87, 83, 49, 55, 48,
  //   53, 6, 3, 85, 4, 3, 12, 46, 100, 48, 98, 98, 49, 51, 49, 99, 102, 100, 102,
  //   99, 55, 56, 97, 56, 46, 97, 112, 45, 115, 111, 117, 116, 104, 45, 49, 46,
  //   97, 119, 115, 46, 110, 105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118,
  //   101, 115, 48, 118, 48, 16, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43, 129,
  //   4, 0, 34, 3, 98, 0, 4, 58, 55, 212, 241, 114, 9, 173, 56, 225, 190, 160,
  //   249, 221, 213, 29, 63, 106, 223, 125, 200, 9, 165, 184, 206, 175, 195, 157,
  //   170, 48, 144, 0, 88, 5, 224, 249, 19, 28, 176, 86, 53, 166, 138, 74, 38, 30,
  //   127, 92, 100, 48, 139, 238, 30, 133, 116, 101, 243, 37, 190, 224, 175, 16,
  //   31, 232, 16, 205, 108, 60, 13, 173, 201, 186, 38, 193, 169, 234, 184, 3,
  //   215, 246, 182, 82, 179, 234, 76, 16, 152, 61, 241, 179, 214, 243, 252, 71,
  //   236, 15, 44, 163, 129, 213, 48, 129, 210, 48, 18, 6, 3, 85, 29, 19, 1, 1,
  //   255, 4, 8, 48, 6, 1, 1, 255, 2, 1, 2, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48,
  //   22, 128, 20, 144, 37, 181, 13, 217, 5, 71, 231, 150, 195, 150, 250, 114,
  //   157, 207, 153, 169, 223, 75, 150, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20,
  //   158, 81, 125, 123, 216, 54, 100, 79, 235, 78, 223, 1, 212, 183, 82, 20, 15,
  //   45, 79, 135, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3, 2, 1, 134, 48,
  //   108, 6, 3, 85, 29, 31, 4, 101, 48, 99, 48, 97, 160, 95, 160, 93, 134, 91,
  //   104, 116, 116, 112, 58, 47, 47, 97, 119, 115, 45, 110, 105, 116, 114, 111,
  //   45, 101, 110, 99, 108, 97, 118, 101, 115, 45, 99, 114, 108, 46, 115, 51, 46,
  //   97, 109, 97, 122, 111, 110, 97, 119, 115, 46, 99, 111, 109, 47, 99, 114,
  //   108, 47, 97, 98, 52, 57, 54, 48, 99, 99, 45, 55, 100, 54, 51, 45, 52, 50,
  //   98, 100, 45, 57, 101, 57, 102, 45, 53, 57, 51, 51, 56, 99, 98, 54, 55, 102,
  //   56, 52, 46, 99, 114, 108, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 3,
  //   104, 0, 48, 101, 2, 48, 93, 25, 111, 33, 166, 176, 133, 91, 152, 39, 105,
  //   244, 38, 251, 179, 101, 224, 16, 173, 145, 91, 29, 45, 189, 121, 98, 224,
  //   132, 140, 62, 95, 247, 166, 45, 43, 234, 4, 54, 69, 171, 201, 2, 33, 57,
  //   119, 69, 25, 122, 2, 49, 0, 156, 210, 77, 221, 201, 120, 115, 152, 98, 33,
  //   219, 111, 219, 56, 158, 3, 169, 11, 95, 104, 235, 196, 252, 194, 246, 80,
  //   109, 90, 49, 253, 77, 49, 60, 84, 243, 117, 185, 218, 66, 26, 157, 55, 70,
  //   108, 228, 103, 151, 18, 89, 3, 29, 48, 130, 3, 25, 48, 130, 2, 159, 160, 3,
  //   2, 1, 2, 2, 17, 0, 213, 249, 153, 85, 45, 110, 63, 34, 36, 235, 227, 214,
  //   146, 101, 193, 241, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 48, 101,
  //   49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 15, 48, 13, 6, 3, 85, 4,
  //   10, 12, 6, 65, 109, 97, 122, 111, 110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12,
  //   3, 65, 87, 83, 49, 55, 48, 53, 6, 3, 85, 4, 3, 12, 46, 100, 48, 98, 98, 49,
  //   51, 49, 99, 102, 100, 102, 99, 55, 56, 97, 56, 46, 97, 112, 45, 115, 111,
  //   117, 116, 104, 45, 49, 46, 97, 119, 115, 46, 110, 105, 116, 114, 111, 45,
  //   101, 110, 99, 108, 97, 118, 101, 115, 48, 30, 23, 13, 50, 53, 48, 49, 51,
  //   48, 48, 57, 51, 53, 52, 54, 90, 23, 13, 50, 53, 48, 50, 48, 53, 48, 53, 51,
  //   53, 52, 54, 90, 48, 129, 138, 49, 61, 48, 59, 6, 3, 85, 4, 3, 12, 52, 57,
  //   54, 100, 53, 51, 51, 98, 101, 56, 48, 50, 48, 54, 100, 102, 57, 46, 122,
  //   111, 110, 97, 108, 46, 97, 112, 45, 115, 111, 117, 116, 104, 45, 49, 46, 97,
  //   119, 115, 46, 110, 105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101,
  //   115, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3, 65, 87, 83, 49, 15, 48, 13, 6,
  //   3, 85, 4, 10, 12, 6, 65, 109, 97, 122, 111, 110, 49, 11, 48, 9, 6, 3, 85, 4,
  //   6, 19, 2, 85, 83, 49, 11, 48, 9, 6, 3, 85, 4, 8, 12, 2, 87, 65, 49, 16, 48,
  //   14, 6, 3, 85, 4, 7, 12, 7, 83, 101, 97, 116, 116, 108, 101, 48, 118, 48, 16,
  //   6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43, 129, 4, 0, 34, 3, 98, 0, 4, 228,
  //   56, 48, 73, 45, 0, 237, 77, 139, 145, 54, 5, 206, 230, 138, 182, 86, 151,
  //   96, 130, 69, 92, 54, 10, 158, 57, 211, 108, 40, 200, 191, 173, 156, 79, 58,
  //   99, 197, 239, 44, 254, 209, 182, 95, 177, 35, 100, 245, 136, 37, 224, 143,
  //   14, 20, 205, 15, 228, 76, 145, 249, 55, 219, 106, 94, 63, 86, 120, 192, 69,
  //   222, 101, 243, 29, 119, 9, 36, 174, 196, 31, 139, 221, 208, 9, 150, 174,
  //   184, 150, 207, 214, 81, 6, 173, 148, 239, 133, 161, 210, 163, 129, 236, 48,
  //   129, 233, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4, 8, 48, 6, 1, 1, 255, 2, 1,
  //   1, 48, 31, 6, 3, 85, 29, 35, 4, 24, 48, 22, 128, 20, 158, 81, 125, 123, 216,
  //   54, 100, 79, 235, 78, 223, 1, 212, 183, 82, 20, 15, 45, 79, 135, 48, 29, 6,
  //   3, 85, 29, 14, 4, 22, 4, 20, 28, 166, 17, 203, 184, 204, 163, 223, 15, 134,
  //   118, 137, 251, 95, 138, 18, 110, 133, 215, 241, 48, 14, 6, 3, 85, 29, 15, 1,
  //   1, 255, 4, 4, 3, 2, 1, 134, 48, 129, 130, 6, 3, 85, 29, 31, 4, 123, 48, 121,
  //   48, 119, 160, 117, 160, 115, 134, 113, 104, 116, 116, 112, 58, 47, 47, 99,
  //   114, 108, 45, 97, 112, 45, 115, 111, 117, 116, 104, 45, 49, 45, 97, 119,
  //   115, 45, 110, 105, 116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101, 115,
  //   46, 115, 51, 46, 97, 112, 45, 115, 111, 117, 116, 104, 45, 49, 46, 97, 109,
  //   97, 122, 111, 110, 97, 119, 115, 46, 99, 111, 109, 47, 99, 114, 108, 47,
  //   100, 98, 53, 49, 101, 57, 51, 48, 45, 101, 56, 48, 50, 45, 52, 55, 57, 57,
  //   45, 57, 98, 57, 48, 45, 101, 102, 97, 55, 101, 52, 55, 57, 53, 55, 101, 51,
  //   46, 99, 114, 108, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 3, 104, 0,
  //   48, 101, 2, 49, 0, 231, 76, 5, 124, 133, 196, 180, 233, 203, 233, 184, 147,
  //   161, 192, 146, 41, 7, 48, 75, 146, 206, 66, 27, 225, 23, 196, 149, 94, 158,
  //   118, 119, 149, 40, 15, 176, 143, 161, 26, 45, 222, 8, 185, 175, 7, 28, 139,
  //   70, 142, 2, 48, 100, 12, 46, 28, 109, 207, 28, 188, 214, 157, 219, 108, 68,
  //   43, 170, 59, 78, 217, 19, 239, 238, 38, 149, 90, 193, 199, 254, 158, 145,
  //   189, 112, 157, 229, 147, 208, 153, 202, 26, 40, 25, 115, 212, 216, 13, 138,
  //   132, 52, 217, 89, 2, 197, 48, 130, 2, 193, 48, 130, 2, 70, 160, 3, 2, 1, 2,
  //   2, 20, 70, 184, 52, 8, 151, 52, 198, 202, 101, 141, 66, 158, 152, 39, 126,
  //   145, 83, 170, 190, 16, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 3, 48, 129,
  //   138, 49, 61, 48, 59, 6, 3, 85, 4, 3, 12, 52, 57, 54, 100, 53, 51, 51, 98,
  //   101, 56, 48, 50, 48, 54, 100, 102, 57, 46, 122, 111, 110, 97, 108, 46, 97,
  //   112, 45, 115, 111, 117, 116, 104, 45, 49, 46, 97, 119, 115, 46, 110, 105,
  //   116, 114, 111, 45, 101, 110, 99, 108, 97, 118, 101, 115, 49, 12, 48, 10, 6,
  //   3, 85, 4, 11, 12, 3, 65, 87, 83, 49, 15, 48, 13, 6, 3, 85, 4, 10, 12, 6, 65,
  //   109, 97, 122, 111, 110, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49,
  //   11, 48, 9, 6, 3, 85, 4, 8, 12, 2, 87, 65, 49, 16, 48, 14, 6, 3, 85, 4, 7,
  //   12, 7, 83, 101, 97, 116, 116, 108, 101, 48, 30, 23, 13, 50, 53, 48, 49, 51,
  //   48, 49, 49, 52, 55, 51, 52, 90, 23, 13, 50, 53, 48, 49, 51, 49, 49, 49, 52,
  //   55, 51, 52, 90, 48, 129, 143, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83,
  //   49, 19, 48, 17, 6, 3, 85, 4, 8, 12, 10, 87, 97, 115, 104, 105, 110, 103,
  //   116, 111, 110, 49, 16, 48, 14, 6, 3, 85, 4, 7, 12, 7, 83, 101, 97, 116, 116,
  //   108, 101, 49, 15, 48, 13, 6, 3, 85, 4, 10, 12, 6, 65, 109, 97, 122, 111,
  //   110, 49, 12, 48, 10, 6, 3, 85, 4, 11, 12, 3, 65, 87, 83, 49, 58, 48, 56, 6,
  //   3, 85, 4, 3, 12, 49, 105, 45, 48, 97, 98, 51, 49, 97, 97, 50, 56, 51, 53,
  //   54, 98, 55, 102, 50, 53, 46, 97, 112, 45, 115, 111, 117, 116, 104, 45, 49,
  //   46, 97, 119, 115, 46, 110, 105, 116, 114, 111, 45, 101, 110, 99, 108, 97,
  //   118, 101, 115, 48, 118, 48, 16, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 5, 43,
  //   129, 4, 0, 34, 3, 98, 0, 4, 235, 207, 194, 176, 234, 197, 61, 119, 228, 173,
  //   177, 88, 203, 4, 112, 226, 76, 135, 17, 135, 102, 251, 141, 164, 172, 97,
  //   245, 218, 233, 217, 104, 145, 93, 187, 58, 242, 11, 190, 186, 240, 18, 243,
  //   248, 212, 52, 17, 124, 109, 179, 80, 114, 72, 22, 150, 90, 202, 104, 46,
  //   185, 36, 59, 21, 128, 125, 112, 103, 37, 247, 1, 133, 40, 0, 113, 141, 248,
  //   195, 44, 174, 215, 214, 22, 157, 243, 177, 237, 7, 45, 105, 177, 30, 50, 60,
  //   203, 91, 113, 96, 163, 102, 48, 100, 48, 18, 6, 3, 85, 29, 19, 1, 1, 255, 4,
  //   8, 48, 6, 1, 1, 255, 2, 1, 0, 48, 14, 6, 3, 85, 29, 15, 1, 1, 255, 4, 4, 3,
  //   2, 2, 4, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 84, 247, 48, 174, 0, 47,
  //   98, 132, 179, 44, 205, 93, 33, 141, 5, 49, 139, 62, 100, 162, 48, 31, 6, 3,
  //   85, 29, 35, 4, 24, 48, 22, 128, 20, 28, 166, 17, 203, 184, 204, 163, 223,
  //   15, 134, 118, 137, 251, 95, 138, 18, 110, 133, 215, 241, 48, 10, 6, 8, 42,
  //   134, 72, 206, 61, 4, 3, 3, 3, 105, 0, 48, 102, 2, 49, 0, 159, 132, 7, 186,
  //   100, 214, 36, 207, 24, 198, 46, 136, 49, 129, 210, 42, 43, 126, 89, 122, 22,
  //   223, 239, 38, 252, 111, 187, 220, 3, 118, 129, 177, 217, 33, 91, 189, 18,
  //   35, 140, 100, 40, 61, 7, 13, 192, 32, 136, 175, 2, 49, 0, 250, 15, 221, 213,
  //   222, 98, 3, 34, 230, 250, 194, 47, 174, 255, 153, 239, 107, 56, 116, 138,
  //   63, 122, 84, 8, 34, 150, 30, 247, 221, 115, 109, 153, 106, 12, 205, 121, 41,
  //   182, 62, 124, 204, 102, 116, 80, 150, 243, 61, 209, 106, 112, 117, 98, 108,
  //   105, 99, 95, 107, 101, 121, 246, 105, 117, 115, 101, 114, 95, 100, 97, 116,
  //   97, 246, 101, 110, 111, 110, 99, 101, 246, 88, 96, 76, 42, 78, 249, 71, 146,
  //   40, 23, 217, 118, 212, 43, 208, 104, 20, 54, 106, 206, 8, 33, 168, 96, 67,
  //   197, 243, 45, 231, 207, 240, 90, 30, 57, 129, 214, 212, 14, 98, 156, 106,
  //   204, 12, 48, 144, 99, 105, 63, 214, 217, 94, 85, 121, 81, 141, 252, 80, 113,
  //   123, 155, 10, 66, 165, 170, 206, 156, 222, 135, 40, 241, 212, 65, 228, 238,
  //   245, 218, 219, 165, 55, 205, 180, 196, 137, 19, 159, 230, 75, 187, 79, 74,
  //   16, 173, 201, 244, 213, 60, 102, 15,
  // ];

  const coseSign1 = await cbor.decodeFirst(Buffer.from(attestation));

  if (!Array.isArray(coseSign1) || coseSign1.length !== 4) {
    throw new Error("Invalid COSE_Sign1 format");
  }

  const [protectedHeader, unprotectedHeader, payload, signature] = coseSign1;

  const attestationDoc = (await cbor.decodeFirst(payload)) as AttestationDoc;

  for (const field of requiredFields) {
    //@ts-ignore
    if (!attestationDoc[field]) {
      throw new Error(`Missing required field: ${field}`);
    }
  }

  if (!(attestationDoc.module_id.length > 0)) {
    throw new Error("Invalid module_id");
  }
  if (!(attestationDoc.digest === "SHA384")) {
    throw new Error("Invalid digest");
  }

  if (!(attestationDoc.timestamp > 0)) {
    throw new Error("Invalid timestamp");
  }

  //for each key, value in pcts
  for (const [key, value] of attestationDoc.pcrs) {
    if (key < 0 || key >= 32) {
      throw new Error("Invalid pcr index");
    }

    if (![32, 48, 64].includes(value.length)) {
      throw new Error("Invalid pcr value length at: " + key);
    }
  }

  if (!(attestationDoc.cabundle.length > 0)) {
    throw new Error("Invalid cabundle");
  }

  for (let i = 0; i < attestationDoc.cabundle.length; i++) {
    if (!numberInRange(0, 1024, attestationDoc.cabundle[i].length)) {
      throw new Error("Invalid cabundle");
    }
  }

  if (attestationDoc.public_key) {
    if (!numberInRange(0, 1024, attestationDoc.public_key.length)) {
      throw new Error("Invalid public_key");
    }
  }

  if (attestationDoc.user_data) {
    if (!numberInRange(-1, 512, attestationDoc.user_data.length)) {
      throw new Error("Invalid user_data");
    }
  }

  if (attestationDoc.nonce) {
    if (!numberInRange(-1, 512, attestationDoc.nonce.length)) {
      throw new Error("Invalid nonce");
    }
  }

  const certChain = attestationDoc.cabundle.map((cert: Buffer) =>
    derToPem(cert)
  );

  if (!verifyCertChain(aws_root_cert_pem, certChain)) {
    throw new Error("Invalid certificate chain");
  }

  const finalCert = Certificate.fromPEM(
    Buffer.from(certChain[certChain.length - 1])
  );
  const key = ECDSAKey.fromPublic(
    finalCert.publicKey.keyRaw,
    utf8ToBytes("AsymmetricECDSA384")
  );

  Sign1Message.fromBytes(key, Uint8Array.from(attestation));
})();

type AttestationDoc = {
  module_id: string;
  digest: string;
  timestamp: number;
  pcrs: Map<number, Buffer>;
  certificate: Buffer;
  cabundle: Array<Buffer>;
  public_key: string | null;
  user_data: string | null;
  nonce: string | null;
};
